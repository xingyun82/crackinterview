package math;

import java.util.*;
/**
 *
 * Write a program to find the n-th ugly number.

 Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.

 Note that 1 is typically treated as an ugly number.

 * Created by xingyun on 15/8/20.
 */
public class LC_264_UglyNumII {

    // main idea:
    // the ugly number can be generated by previous ugly number
    // maintain 3 ugly number list
    // 1*2, 2*2, 3*2, 4*2, ..., ugly[i]*2, ...
    // 1*3, 2*3, 3*3, 4*3, ..., ugly[i]*3, ...
    // 1*5, 2*5, 3*5, 4*5, ..., ugly[i]*5, ...
    // then, merge the 3 list, each time pick the minimum value of current position
    // note that if two list current position has same value as minimum, then both of the list should move forward

    public int nthUglyNumber(int n) {
        int[] ugly = new int[n];
        ugly[0] = 1;
        int index2 = 0, index3 = 0, index5 = 0;
        int factor2 = 2, factor3 = 3, factor5 = 5;
        for(int i=1;i<n;i++){
            int min = Math.min(Math.min(factor2,factor3),factor5);
            ugly[i] = min;
            if(factor2 == min)
                factor2 = 2*ugly[++index2];
            if(factor3 == min)
                factor3 = 3*ugly[++index3];
            if(factor5 == min)
                factor5 = 5*ugly[++index5];
        }
        return ugly[n-1];
    }

    public static void main(String[] args) {
        LC_264_UglyNumII inst = new LC_264_UglyNumII();
        System.out.println(inst.nthUglyNumber(20));
    }
}
